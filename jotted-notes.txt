--
-- Feature Ideas --
--

- Maze animations? Save to gif? See page 51 of Maze book. Can easily make an image at every step of Dijkstra. But could we make a gif out of that? That could be really cool.
	--> https://javadoc.io/static/net.imagej/ij/1.53j/ij/ImagePlus.html https://imagej.nih.gov/ij/developer/api/ij/ij/ImageStack.html
	--> Make bunch of ImagePlus images --> List --> Array --> ImageStack --> New Image 

- Maze Builder:
	- New build methods
	- endfarthestFromStart();
	- startFarthestFromEnd();
		--> How would start know about end unless end was determined before it? 
			--> Need to determine start/end first depending on conditions?

-  ObservableMazeAlgorithm
	- completedStep(StepType)
		--> StepType: { UpdatedState, UnchangedState }
			--> Lets observers know of steps that do not result in a change of any internal state.

- GridData implementing GridDataLayer interface
	--> Would be cool as it would allow multiple layers to pass as a single layer, but it's usefulness would be questionable:
		1. It doesn't really seem like any code would need it right now. Everything works as is with using multiple layers in a single
		grid data instance, instead of multiple grid data instances referencing each other.
		2. GridData implementing GridDataLayer would mean that only one value can be retrieved for the GridData instance layer. Even if it has several layers with multiple values for a cell, only ONE can be returned. This is a severly worse option than having each layer's value be returned separately. If a new method would need to be introducted (e.g. getSublayers() ), then the GridDataLayer's generic design breaks. It'll now have logic specifically for the GridData class.

- Solution verification?

--
-- Redesigns --
--

- Grid is becoming a bloated class containing core logic, display logic, meta-logic (i.e. GridData). How can we separate the functionality out amongst Maze (higher-level class), GridData (data class) and other new classes (e.g. GridDisplay)?
	1. GridRenderer classes -> GridStringRenderer, GridImageRenderer - methods
		-> YES! Renderers would then be set from the Maze and MazeBuilder classes

	2. GridData should belong to Grid. However, it should be set and manipulated from the Maze and MazeBuilder classes. Thus, only low level functions should be provided from Grid for getting and working with the GridData.
	

- Multiple grid data layers?
	--> PathGridData (restrict data to specific path) + SimpleGridData (start, finish and other mazegoals) + CellDistances (grid distance values and colors)
	--> GridData + GridDataLayer classes? 
		--> YES!! GridData is a collection of any number of GridDataLayers that can stack, take priority, etc
		--> Definitely should be done.

- Create Path class for abstraction from List<Cell> everywhere.

- Proper usage of exceptions within GridAnimator... I don't understand enough about exception standards to say whether or not I should throw an exception or not, and what kind of exception that would be.

--
-- Utilities and Reusable functions --
--
- Grid PathBuilder class for easy construction of paths within an existing grid. Would support something like..
	Grid.newPathFrom(0,0).to(0, 5).to(3, 5).to(3,6); Is it worth the work?
- Dijkstra.getPathBetween method using 2 calls to getPathFromRoot and combining the lists. Unnecessary right now.


--
-- Random tests --
--

            //Random maze testing
/*          maze.getGrid().hideGridData();
            maze.getGrid().toImage("C", 30).show();
            maze.getGrid().showGridData();
            maze.getGrid().toImage("D", 30).show();
            maze.getGrid().clearPath();
            maze.getGrid().toImage("E", 30).show();
            maze.getGrid().displayAllCells();
            maze.getGrid().toImage("F", 30).show();
            maze.getGrid().displayPathExclusively();
            maze.getGrid().setPath(Arrays.asList(maze.getEndCell()));
            maze.getGrid().toImage("G", 30).show();
            maze.getGrid().clearGridData();
            maze.getGrid().toImage("H", 30).show(); */